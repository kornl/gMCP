\documentclass[a4paper, 10pt]{article}
\usepackage[T1]{fontenc}
\usepackage{url}
\usepackage{Sweave}
\usepackage{graphicx}
\usepackage{tikz}
\usetikzlibrary{snakes,arrows,shapes}
\usepackage[margin=0.9in]{geometry}
\usepackage{url}
\usepackage{hyperref}
\usepackage{listings}
\usepackage{xspace}
\usepackage{tabularx}
\usepackage{makeidx}\makeindex
\usepackage[numbers]{natbib}
\usepackage{algorithmic} 
\usepackage{algorithm}
%\usepackage[left=3cm,right=3cm,top=2cm,bottom=2cm]{geometry}
\usepackage{amsmath,amsthm,amsfonts,amssymb}
\bibliographystyle{plainnat}
\setlength{\parindent}{0mm}
\setlength{\parskip}{1mm}
\newcommand{\commentout}[1]{}
\renewcommand{\hlcomment}[1]{\textcolor[rgb]{0.4,0.4,0.4}{#1}}
\renewcommand{\theequation}{\thesection.\arabic{\equation}}
\numberwithin{equation}{section}

\theoremstyle{definition}
\newtheorem{Def}{Definition}[section]
\newtheorem{Rem}[Def]{Remark}
\newtheorem{RemDef}[Def]{Remark und Definition}
\newtheorem{DefRem}[Def]{Definition und Remark}
\newtheorem{Example}[Def]{Example}
\theoremstyle{plain}
\newtheorem{Theorem}[Def]{Theorem}
\newtheorem{DefTheorem}[Def]{Definition and Theorem}
\newtheorem{Corollary}[Def]{Corollary}
\newtheorem{Lemma}[Def]{Lemma}

\newcommand{\C}{\ensuremath{\mathbb{C}}\xspace}
\newcommand{\R}{\ensuremath{\mathbb{R}}\xspace}
\newcommand{\Q}{\ensuremath{\mathbb{Q}}\xspace}
\newcommand{\Z}{\ensuremath{\mathbb{Z}}\xspace}
\newcommand{\NN}{\ensuremath{\mathbb{N}_0}\xspace}
\newcommand{\N}{\ensuremath{\mathbb{N}}\xspace}
\newcommand{\sF}{\ensuremath{\mathcal{F}}\xspace}
\newcommand{\Pot}{\ensuremath{\mathfrak{Pot}}\xspace}
\newcommand{\kronecker}{\raisebox{1pt}{\ensuremath{\:\otimes\:}}}

\DeclareMathOperator{\range}{range}

\newcommand{\skp}[1]{\left\langle#1\right\rangle}

\renewcommand{\epsilon}{\varepsilon}
\renewcommand{\phi}{\varphi}
\newcommand{\id}{\text{id}}

\newenvironment{Proof}{\par\noindent\upshape\textit{Proof. }\nopagebreak}{\qed\par}

\usepackage{setspace}
\onehalfspacing

\begin{document}

% \VignetteIndexEntry{A Graphical Approach to Weighted Multiple Test Procedures}
% \VignetteDepends{coin}

\title{gMCP - an R package for a graphical approach to weighted multiple test procedures} 

\author{Kornelius Rohmeyer}

\maketitle

\newpage

\tableofcontents

% Bibliotheken - Chunk 1
<<echo=FALSE,results=hide>>=

library(gMCP)
options(width=140)
options(digits=4)
gMCPReport <- function(...) {invisible(NULL)}
graphGUI <- function(...) {invisible(NULL)}
#options(prompt="> ", continue="+ ")

@

\newpage

\section{Introduction}

This package provides functions and graphical user interfaces for
graph based multiple test procedures. By defining weighted directed graphs one
also defines a weighting strategy for all subsets of null hypotheses.
Weighted tests can be performed on these subsets and following the
closed test procedure this leads to a multiple test procedure
controlling the family wise error rate in the strong sense. In some
cases shortcuts are available, one example is the weighted Bonferroni
procedure that leads to a sequentially rejective multiple test procedure.

At all steps either graphical user interfaces or the R Console with S4
objects and methods can be used.

%Please note that this is still an early release and the API will most
%likely still change in future versions.

\subsection{Installation}

If you don't already have R on your system, you can download a bundled
version of R and gMCP from \url{http://www.algorithm-forge.com/gMCP/bundle/}.

Otherwise open R and type \texttt{install.packages("gMCP")}, 
select an arbitrary mirror and gMCP will be downloaded and installed.

Once it is installed, whenever you start R you can load the gMCP
package by entering \texttt{library(gMCP)} into the R Console. The
graphical user interface is started with the command
\texttt{graphGUI()}.

If you run into problems, see
\url{http://cran.r-project.org/web/packages/gMCP/INSTALL} or write us
an email at
\href{mailto:help@small-projects.de}{\texttt{help@small-projects.de}}.

\subsection{Example and diving in}

Let's start with a well-known procedure and see how it fits into this
graphical approach to weighted multiple test procedures: The
Bonferroni-Holm-Procedure \cite{Holm79}.

\begin{Theorem}[Bonferroni-Holm-Procedure]\index{Bonferroni-Holm-Procedure} 
Let $T_1, \ldots, T_m$
be test statistics for $m\in\N$ null hypotheses $H_1, \ldots, H_m$ and
$p_1, \ldots, p_m$ the associated p-values. Then the following test
will control the familywise error rate at level $\alpha\in]0,1[$ in
    the strong sense:

Denote the ordered p-values by $p^{(1)}<p^{(2)}<\ldots<p^{(m)}$ 
and the corresponding hypotheses by $H^{(1)},H^{(2)},\ldots, H^{(m)}$.

Reject $H^{(1)},H^{(2)},\ldots, H^{(j)}$ such that 
\[p^{(i)}\leq\frac{\alpha}{n-i+1}\quad\text{for all $1\leq i\leq j$}.\]
\end{Theorem}

The corresponding graph for the Bonferroni-Holm-Procedure for three
hypotheses is given in Figure \ref{exampleHolm}.  We see a fully
connected graph, where each node represents a hypothesis and the nodes
and edges have weights.

\begin{figure}[ht]
  \centering
% Chunk 2
<<echo=FALSE,results=tex>>=

graph <- BonferroniHolm(3)
cat(graph2latex(graph, scale=0.7, fontsize="tiny", labelTikZ="near start,fill=blue!20"))

@
  \caption{\label{exampleHolm} Graph representing the
    Bonferroni-Holm-Procedure for three hypotheses.}
\end{figure}

A null hypothesis can be rejected, when the p-value is less than the
alpha level of the corresponding node.  In this case the graph will be
updated and the alpha level of this node is passed according to the
edge weights.

\begin{Example}
  We give an example for the Bonferroni-Holm-Procedure that will
  be used repeatedly throughout this manual. Of course this 
  package is made for more advanced tests (you find a selection in 
  section \ref{caseStudies}),
  but since most readers are already familiar with this procedure,
  for a first introduction of gMCP, we stick to this simple example.  
  
  Let $p_1=0.01$, $p_2=0.07$ and $p_3=0.02$ be three p-values and
  $\alpha=0.05$.  In the first step $H_1$ can be rejected since
  $p_1<\alpha/3$.  The updated graph can be seen in figure
  \ref{exampleHolmP} and now also $H_3$ can be rejected since
  $p_1<\alpha/2$.  Again the graph is updated, but $H_2$
  can not be rejected.
\end{Example}

\begin{figure}[ht]
  \centering
% Chunk 3
<<echo=FALSE,results=tex>>=

graph <- BonferroniHolm(3)
cat(graph2latex(graph, scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm"))
cat("$\\downarrow$ reject $H_1$\\\\")
graph <- rejectNode(graph, "H1")
cat(graph2latex(graph, scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm"))
cat("$\\downarrow$ reject $H_3$\\\\")
graph <- rejectNode(graph, "H3")
cat(graph2latex(graph, scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm"))

@
  \caption{\label{exampleHolmP} Example showing how two
    null hypotheses can be rejected with p-values $p_1=0.01$,
    $p_2=0.07$ and $p_3=0.02$.}
\end{figure}

Let's reproduce this with the \texttt{gMCP} package. We start R and enter:

\scriptsize
% Chunk 4
<<echo=TRUE, size=scriptsize>>=

library(gMCP)
graphGUI()

@
\normalsize

The GUI seen in Figure \ref{fullGUI} is shown and we select from the
menu "\emph{Example graphs}" the entry "\emph{Bonferroni-Holm Test}".
We enter the three p-values in the respective fields on the right
side.  By clicking on the button with the green arrow we start the
test procedure and can sequentially reject all three hypotheses.

If we don't want to use the GUI we can also use R:

\scriptsize
% Chunk 5
<<echo=TRUE, size=scriptsize>>=

library(gMCP)
graph <- BonferroniHolm(3)
gMCP(graph, pvalues=c(0.01,0.07,0.02), alpha=0.05)

@
\normalsize

\section{Basic Theoretical Background}

\begin{algorithm}
\caption{Removing node $i$, passing the weight and updating the graph edges}
\label{rmNodeAlg}
\begin{algorithmic}
\FOR{$l \in I$} 
  \STATE $w_l \gets w_l+w_i\cdot g_{il}$
  \FOR{$k \in I$}    
    \IF{$l \neq k$ \textbf{and} $g_{lj}\cdot g_{jl}\neq1$}
      \STATE $g_{lk} \gets \frac{g_{lk}+g_{lj}\cdot g_{jk}}{1-g_{lj}\cdot g_{jl}}$
    \ELSE
      \STATE $g_{lk} \gets 0$
    \ENDIF    
  \ENDFOR
\ENDFOR
\end{algorithmic}
\end{algorithm}

\section{Creating Weighted Graphs}

In the first step a graph that describes the multiple test procedures
must be created.

\begin{figure}[ht]
  \centering   
% Chunk 6
<<echo=FALSE,results=tex>>=

graph <- BretzEtAl2011()
cat(graph2latex(graph, scale=0.7, fontsize="tiny"))

@
  \caption{\label{exampleGraphBretz} Example graph from \cite{bretzEtAl2009power} that we will create in this vignette.}
\end{figure}

\subsection{Using R}

The most convenient way to create a graph in R is to use the functions
\texttt{matrix2graph}\index{matrix2graph} and
\texttt{setWeights}\index{setWeights}.  As an example we create the
graph from Bretz et al. \cite{bretzEtAl2009power} that you can see in
figure \ref{exampleGraphBretz}.


\scriptsize
% Chunk 7
<<echo=TRUE, size=scriptsize>>=

m <- rbind(H11=c(0,   0.5, 0,   0.5, 0,   0  ),
           H21=c(1/3, 0,   1/3, 0,   1/3, 0  ),
           H31=c(0,   0.5, 0,   0,   0,   0.5),
           H12=c(0,   1,   0,   0,   0,   0  ),
           H22=c(0.5, 0,   0.5, 0,   0,   0  ),
           H32=c(0,   1,   0,   0,   0,   0  ))

graph <- matrix2graph(m)
graph <- setWeights(graph, c(1/3, 1/3, 1/3, 0, 0, 0))

@
\normalsize

For accessing the weights and adjacency matrix of an existing graph
the functions \texttt{getWeights} and \texttt{getMatrix} are provided.

Let's print the newly created graph:

\scriptsize
% Chunk 8
<<echo=TRUE, size=scriptsize>>=

print(graph)

@
\normalsize

Since we also want to visualize the graph, we set two node attributes
\texttt{X} and \texttt{Y} (for further information see the manual
pages of method \texttt{nodeAttr}).

\scriptsize
% Chunk 9
<<echo=TRUE, size=scriptsize>>=

graph@nodeAttr$X <- c(H11=100, H21=300, H31=500, H12=100, H22=300, H32=500)
graph@nodeAttr$Y <- c(H11=100, H21=100, H31=100, H12=300, H22=300, H32=300)	

@
\normalsize

For placement of the nodes in a matrix pattern, the function
\texttt{placeNodes} is helpful. The following code does the same as
the three lines of R code above.

\scriptsize
% Chunk 10
<<echo=TRUE, size=scriptsize>>=

graph <- placeNodes(graph, nrow=2)

@
\normalsize

Coordinates are interpretated as pixels in the GUI and big points in
{\LaTeX} (72 bp = 1 inch).\index{coordinates}

Let's take a look at the graph in {\LaTeX} rendered with TikZ
\cite{TikZ}\index{TikZ} (you can see the compiled result in figure
\ref{exampleGraphBretz}):

\scriptsize
%\lstset{language=[LaTeX]TeX}
%\begin{lstlisting}
% Chunk 11
<<echo=TRUE, size=scriptsize>>=

cat(graph2latex(graph))

@
%\end{lstlisting}
\normalsize

We can even change the position of the edge labels for further fine
tuning of the graphical representation.  With the following command we
place the label for the edge from \texttt{H1} to \texttt{H2} at
position (200, 80):

\scriptsize
% Chunk 12
<<echo=TRUE, size=scriptsize>>=

edgeAttr(graph, "H11", "H21", "labelX") <- 200
edgeAttr(graph, "H11", "H21", "labelY") <- 80

@
\normalsize



\subsection{Using the GUI}

The creation of \texttt{graphMCP} objects as seen in the last section 
with basic R commands is very straight forward,
but still takes some time and typos may occur.  More convenient for
the most users is the use of the graphical user interface for
creating and editing MCP graphs that the \texttt{gMCP} package
includes.

It is called by the command \texttt{graphGUI()} and takes as optional
argument a variable name, given as a character string, of the graph to
edit.
% or under which a newly created \texttt{graphMCP} object will be
% available from the R command line.

\scriptsize
% Chunk 13
<<echo=TRUE, size=scriptsize>>=

graphGUI("graph")

@
\normalsize

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.95\textwidth]{pictures/FullFeaturedGUI.png}      
  \caption{\label{fullGUI} The graphical user interface allows testing, calculation of confidence intervals and adjusted p-values.}
\end{figure}

Let's take a look at the icon panel:

\includegraphics[width=0.5cm]{pictures/vertex.png} This button lets
you add a new node to the graph.  After pressing the button click
somewhere on the graph panel and a new node will appear at this place.

\includegraphics[width=0.5cm]{pictures/edge.png} This button lets you
add a new edge between two nodes.  After pressing the button click on
the node the edge should start and after that on the node the edge
should end.

\includegraphics[width=0.5cm]{pictures/zoom_in.png}
\includegraphics[width=0.5cm]{pictures/zoom_out.png} For really big
graphs the ability to zoom in and out is usefull.

\includegraphics[width=0.5cm]{pictures/StartTesting.png}
\includegraphics[width=0.5cm]{pictures/Reset.png} Starts the testing
procedure / goes back to the graph modification.

\includegraphics[width=0.5cm]{pictures/adjPval.png} Calculates the
adjusted p-values.

\includegraphics[width=0.5cm]{pictures/confint2.png} Calculates
simultaneous confidence intervals.

With drag and drop you can move nodes and also adjust edges.

\section{The sequentially rejective MTP}

For a full description of the sequentially rejective multiple testing
procedure take a look at Bretz et al. \cite{bretzEtAl2009graphical}. 

\subsection{Using R}

You can either specify each rejection step yourself or simply use the 
method \texttt{gMCP}:

\scriptsize
% Chunk 14
<<echo=TRUE,keep.source=TRUE, size=scriptsize>>=

graph <- BretzEtAl2011()

# We can reject a single node:
print(rejectNode(graph, "H11"))

# Or given a vector of pvalues let the function gMCP do all the work:  
pvalues <- c(0.1, 0.008, 0.005, 0.15, 0.04, 0.006)
result <- gMCP(graph, pvalues)
print(result)

@
\normalsize

We can create a TikZ graphic from the last graph with 
\texttt{graph2latex(result@graphs[[4]])} that is shown in figure \ref{finalstate}.

\begin{figure}[ht]
  \centering   
% Chunk 15
<<echo=FALSE,results=tex>>=

cat(graph2latex(result@graphs[[4]], scale=0.7, fontsize="tiny"))

@
  \caption{\label{finalstate}Final graph from the test procedure after rejection of $H_{21}$, $H_{31}$ and $H_{32}$.}
\end{figure}

The command \texttt{gMCPReport}\index{report generation} generates a
full report of the testing procedure:

\scriptsize
% Chunk 16
<<echo=TRUE, size=scriptsize>>=

gMCPReport(result, "Report.tex")

@
\normalsize

\subsubsection{Adjusted p-values and simultaneous confidence intervals}\index{adjusted p-values}\index{simultaneous confidence intervals}

Also adjusted p-values and simultaneous confidence intervals can be computed.

% Chunk 17
<<echo=FALSE,results=hide>>=

d1 <- c(1.68005156523844, 1.95566697423700, 0.00137860945822299, 0.660052238622464, 
		1.06731835721526, 0.39479303427265, -0.312462050794408, 0.323637755662837, 
		0.490976552328251, 2.34240774442652)

d2 <- c(0.507878380203451, 1.60461475524144, 2.66959621483759, 0.0358289240280020, 
		-1.13014087491324, 0.792461583741794, 0.0701657425268248, 3.15360436883856, 
		0.217669661552567, 1.23979492014026)

d3 <- c(-1.31499425534849, 1.62201370145649, 0.89391826766116, 0.845473572033649, 
		2.17912435223573, 1.07521368050267, 0.791598289847664, 1.58537210294519, 
		-0.079778759456515, 0.97295072606043)

est <- c(0.860382, 0.9161474, 0.9732953)
s <- c(0.8759528, 1.291310, 0.8570892)
pval <- c(0.01260, 0.05154, 0.02124)/2

df <- 9
# Statistics:
st <- qt(pval/2, df=df, lower.tail=FALSE)
# Estimates:
est <- st*s/sqrt(10)

@

Let's assume the tests for hypotheses $H1:\;\theta_1\leq0$,
$H2:\;\theta_2\leq0$ and $H3:\;\theta_3\leq0$ are three t-tests with degree
of freedom 9.  The estimates are
$\hat\theta_1=\Sexpr{format(est[1])}$,
$\hat\theta_2=\Sexpr{format(est[2])}$ and
$\hat\theta_3=\Sexpr{format(est[3])}$, the sample standard deviations
$s_1=\Sexpr{format(s[1])}$,
$s_2=\Sexpr{format(s[2])}$ and
$s_3=\Sexpr{format(s[3])}$ the t-statistics
$\Sexpr{format(st[1])}$, $\Sexpr{format(st[2])}$ and
$\Sexpr{format(st[3])}$ and the corresponding p-values $\Sexpr{format(pval[1])}$, 
$\Sexpr{format(pval[2])}$ and
$\Sexpr{format(pval[3])}$.  We want to adjust for multiple testing
by using the Bonferroni-Holm-Procedure with $\alpha=0.025$.

\scriptsize
% Chunk 18
<<echo=TRUE, keep.source=TRUE, size=scriptsize>>=

# Estimates:
est <- c("H1"=0.860382, "H2"=0.9161474, "H3"=0.9732953)
# Sample standard deviations:
ssd <- c("H1"=0.8759528, "H2"=1.291310, "H3"=0.8570892)

pval <- c(0.01260, 0.05154, 0.02124)/2

simConfint(BonferroniHolm(3), pvalues=pval, 
		confint=function(node, alpha) {
			c(est[node]-qt(1-alpha,df=9)*ssd[node]/sqrt(10), Inf)
		}, estimates=est, alpha=0.025, mu=0, alternative="greater")

# Note that the sample standard deviations in the following call
# will be calculated from the pvalues and estimates.
simConfint(BonferroniHolm(3), pvalues=pval, 
		confint="t", df=9, estimates=est, alpha=0.025, alternative="greater")

@
\normalsize

\subsection{Using the GUI}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/CIDialog.png}      
  \caption{\label{CIDialog} For normal and t-distributions simultaneous CI can be calculated by the GUI.}
\end{figure}


Use the following two buttons:
\includegraphics[width=1cm]{pictures/adjPval_b.png}
\includegraphics[width=1cm]{pictures/confint2_b.png}

See \cite{Bretz11}.

\section{Weighted parametric tests}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/correlated.png}      
  \caption{\label{correlated} You can also specify a correlation between the tests.}
\end{figure}

In the lower right panel with p-values, it is also possible to specify a known correlation between these values (see figure \ref{correlated}).

For further information please take a look at the vignette "\emph{Weighted parametric tests defined by graphs}".

\section{Correlation matrix creation}\index{correlation matrix}

The GUI features a dialog for easy creation of correlation matrices (see figure \ref{createCM1}).

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/createCM1.png}      
  \caption{\label{createCM1} You can configure many things in the option dialog.}
\end{figure}



If the entered matrix is not positive semidefinite, 
i.e.\ negative eigen values exist, a warning is given.

\[A \kronecker B\]

Graph from Bretz et al. (2009) - Figure 14

Literature: Bretz F., Maurer W., Brannath W., Posch M.: A graphical approach to sequentially rejective multiple test procedures. Statistics in Medicine 2009; 28:586-604. Figure 14.

%\begin{figure}[ht]
%  \centering    
%  \includegraphics[width=0.7\textwidth]{pictures/createCM1.png}      
%  \caption{\label{createCM2} You can configure many things in the option dialog.}
%\end{figure}

%\begin{figure}[ht]
%  \centering    
%  \includegraphics[width=0.7\textwidth]{pictures/createCM1.png}      
%  \caption{\label{createCM3} You can configure many things in the option dialog.}
%\end{figure}

\section{Epsilon edges}\index{epsilon edges}

%\begin{Def}
  %Convergence in distribution
  %Convergence in probability
  %Almost sure convergence
  %Sure convergence
  %Convergence in the r-th mean
%\end{Def}

The GUI supports epsilon edges. You can enter the weights in R syntax,
e.g.\ \texttt{1-2*\textbackslash epsilon+1/3*\textbackslash epsilon\^{}2} for $1-2\epsilon+\frac{1}{3}\epsilon^2$.

\begin{figure}[ht]
  \centering
  \begin{tikzpicture}[scale=0.7]
% Chunk 19
<<echo=FALSE,results=tex>>=

cat(graph2latex(parallelGatekeeping(), scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm", tikzEnv=FALSE))
cat(graph2latex(improvedParallelGatekeeping(), scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm", tikzEnv=FALSE, offset=c(300, 0)))

@
\end{tikzpicture}
  \caption{\label{gatekeeping}\index{parallel gatekeeping}\index{gatekeeping!parallel}\index{gatekeeping!improved parallel} The Parallel Gatekeeping and the Improved Parallel Gatekeeping Procedure.}
\end{figure}

\commentout{

Algorithm of Bretz et al. \cite{bretzEtAl2009power} for rejecting a node:

\[\alpha_l \leftarrow \begin{cases}\alpha_l+a_jg_{jl}&l\in I\\0&\text{otherwise}\end{cases}\]

\[g_{lk} \leftarrow \begin{cases}\frac{g_{lk}+g_{lj}g_{jk}}{1-g_{lj}g_{jl}}&k,l\in I, l\neq k, g_{lj}g_{jl}<1\\0&\text{otherwise}\end{cases}\]

We want now investigate what happens if a edge weight $\epsilon>0$ approaches $0$.
In respect to 

\[\alpha_l \leftarrow \begin{cases}0=\lim\limits_{g_{jl}\rightarrow0}(\alpha_l+a_jg_{jl})&l\in I\\0&\text{otherwise}\end{cases}\]

The only question is, what happens if and $l\in I, l\neq k, g_{lj}g_{jl}<1$.
If $g_{lj}g_{jl}==1$ still $g_{lk}<-0$.
 
\[\lim\limits_{g_{jl}\rightarrow0}\left(\frac{g_{lk}+g_{lj}g_{jk}}{1-g_{lj}g_{jl}}\right)
=\begin{cases}
  \frac{g_{lk}+g_{lj}g_{jk}}{1-g_{lj}g_{jl}}&g_{lj}g_{jl}<1\\
  0&g_{lj}g_{jl}=1\\a\\b\\\end{cases}
=\]
}


\scriptsize
% Chunk 20
<<echo=TRUE, keep.source=TRUE, size=scriptsize>>=

m <- rbind(H1=c(0,           0,           0.5,           0.5          ),
           H2=c(0,           0,           0.5,           0.5          ),
           H3=c("\\epsilon", 0,           0,             "1-\\epsilon"),
           H4=c(0,           "\\epsilon", "1-\\epsilon", 0            ))

graph <- matrix2graph(m)
#graph <- improvedParallelGatekeeping()
graph
substituteEps(graph, eps=0.001)

gMCP(graph, pvalues=c(0.02, 0.04, 0.01, 0.02), eps=0.001)

@
\normalsize

\section{Power Simulations}\index{power simulation}

No $\epsilon$-edges are allowed.

\begin{figure}[ht]
  \centering
% Chunk 21
<<echo=FALSE,results=tex>>=

cat(graph2latex(generalSuccessive(), scale=0.7, fontsize="tiny"))

@
  \caption{\label{powergraph} Graph from Bretz et al. (2009)}
\end{figure}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=9cm]{pictures/power.png}      
  \caption{\label{power} Local power and some (trivial) user defined power functions.}
\end{figure}

\subsection{Variable edge weights}\index{edge weights!variable}

Apart from latin letters the following greek letters can be used to
name a variable\footnote{Note that omicron is not allowed since it can
  not destinguished from the latin character "o".}. Please enter them
with a leading backslash so that they are recognized:

\begin{quote}
  $\backslash$alpha, $\backslash$beta, $\backslash$gamma,
  $\backslash$delta, $\backslash$epsilon, $\backslash$zeta,
  $\backslash$eta, $\backslash$theta, $\backslash$iota,
  $\backslash$kappa, $\backslash$lambda, $\backslash$mu,
  $\backslash$nu, $\backslash$xi,
  % $\backslash$omicron,
  $\backslash$pi, $\backslash$rho, $\backslash$sigma, $\backslash$tau,
  $\backslash$upsilon, $\backslash$phi, $\backslash$chi,
  $\backslash$psi, $\backslash$omega.
\end{quote}

These are shown in the GUI as $\alpha,\; \beta,\; \gamma,\; \delta,\;
\epsilon,\; \zeta,\; \eta,\; \theta,\; \iota,\; \kappa,\; \lambda,\;
\mu,\; \nu,\; \xi,\;
%\omicron,\; 
\pi,\; \rho,\; \sigma,\; \tau,\; \upsilon,\; \phi, \chi,\; \psi$ and
$\omega$.

\includegraphics[width=5cm]{pictures/variableEditor.png}

\scriptsize
% Chunk 22
<<echo=TRUE, keep.source=TRUE, size=scriptsize>>=

graph <- generalSuccessive()
graph

@
\normalsize

\section{Options and Import/Export}

\subsection{Options}\index{options}

This subsection is work in progress, but fortunately the options in
figure \ref{optionsDialog} should be fairly self-explanatory.

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/optionsDialog.png}      
  \caption{\label{optionsDialog} You can configure many things in the option dialog.}
\end{figure}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/optionsDialog2.png}      
  \caption{\label{optionsDialog2} You can configure many things in the option dialog.}
\end{figure}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/optionsDialog3.png}      
  \caption{\label{optionsDialog3} You can configure many things in the option dialog.}
\end{figure}

\begin{description}
  \item[Grid] For easier placement of nodes a grid can be used that aligns the
  nodes to its intersections. You can specify a positive integer that sets the
  grid size, i.e. the width in pixels between two proximate parallel
  lines. If you set the grid size to 1 this would allow unrestricted placement
  and therefore disables the grid.
  \item[Number of digits] Number of digits to be shown at various places. In
  this version not every part of the GUI will use this value, but this will
  improve in further versions.
  \item[Line width] Especially if you want to use exported PNG graphics in
    other documents, you may want to adjust the line width of edges and nodes,
    when borders look to thin or thick.
  \item[Font Size] Font size of the text in the GUI widgets.
  \item[Look'n'Feel] The way the widgets of a GUI look and how the behave
    ("feel") is called "look and feel" in Java. Depending on your operating
    systems and classpath several Look'n'Feel implementations may be available 
    (e.g. Metal (Java default), Windows, Mac OS, Motif, System/GTK).
    If you are used to a particular Look'n'Feel, you can select it here.
    But if you have problems with the graphical interface, please try to use
    the default theme Metal to check whether it could be a problem with the
    selected Look'n'Feel.
  \item[Colored image files and pdf reports]
  \item[Show rejected nodes in GUI]
  \item[Use JLaTeXMath] There are not many reasons not to use the free Java
    library JLaTeXMath to render numbers, symbols and formulas in the
    GUI. The option is mainly provided in case that errors occur
    displaying the numbers and formulas.
  \item[Show fractions instead of decimal numbers] If you see  
  \item[Use epsilon approximation] In this version this value can not be
    changed. No calculations with infinitesimal small values are done but
    instead the epsilon is approximated by a small real number.
  \item[Epsilon] The small real value that should be used to approximate
    the infinitesimal small epsilon. Default is $10^{-3}$.
  \item[Try to show fractions / rounded numbers] Floating point numbers are used
    for all calculations and values like $1/3$ would be normally shown as
    $0.3333333$. When this option is active the method fractions from package
    MASS is used to display fractions whenever the floating point numbers are
    close to a fraction that looks right.
  \item[Number of digits to assure] This is an option for displaying numbers
  and does not influence the calculations. As seen in the previous option
  description, we sometimes try to display fractions instead of floating point
  numbers. This option will assure that the shown fraction does not
  differ in more than the specified value from the floating point number.
  \item[Verbose output of algorithms] If selected the algorithms produce a
  verbose output that is shown in the GUI. For example the Simes test specifies
  for each intersection of elementar hypotheses whether and why it could be
  rejected.
  \item[Monte Carlo sample size for power] The Monte Carlo sample size for power
  calculations. Default is 10000.
  \item[Type of random numbers] You can select quasirandom or pseudorandom
  numbers for power calculations. The quasirandom option uses a randomized
  Lattice rule, and should be more efficient than the pseudorandom option that
  uses ordinary (pseudo) random numbers.
  \item[Check online for updates] On start-up gMCP can check automatically
    whether a new version of gMCP is available. Only your version of R (like
    2.13.1), the version of gMCP (like 0.7-5) and a random number (to
    distinguish different requests) are transmitted.
  \item[Export images with transparent background] If checked the background of
    exported PNG graphics will be transparent. Otherwise the graphs are
    displayed on a white background.
  \item[If a node is dragged also all edges to this node follow]
  \item[Automatically enter the editing mode, whenever a table cell
    gets the focus]
\end{description}

\subsubsection{Privacy}

The GUI always asks before sending data to our server. It will do so to
\begin{enumerate}
  \item check whether a new version of gMCP exists,  
  \item send a wishlist if the user chooses to,
%  \item submit/load a graph to the online archive 
  \item send bug reports if an error occurs.
\end{enumerate}

Only in the last case of a bug report some information about your
computer is collected that can be reviewed by the user before sending
the bug report.  If you do not agree with sending this data, simply
don't send a problematic bug report or if you never want to send bug
reports, disable the option in the options menu.

\subsection{Import/Exports}\index{import}\index{export}

This subsection is work in progress, but fortunately the menu entries
in figure \ref{fileMenu} should be fairly self-explanatory.

You can export graphs to png files.  The background of these png files
will be made transperant, so that they will fit into whichever
document you insert them.  Note that some image viewers visualize
transparency with a checkerboard pattern.

\begin{figure}[ht]
  \centering    
  \includegraphics[width=4cm]{pictures/filemenu.png}      
  \caption{\label{fileMenu} Import and export of graphs.}
\end{figure}

\subsection{Important TikZ commands for optimizing the reports}\index{graph2latex}\index{TikZ}
A clear automatic placement of edges and weight labels without
overlapping is a very difficult task and for complicated graphs the
\texttt{gMCP} package will often fail to accomplish this.  There is
the possibilty to adjust the edges and labels in the GUI, but since
the {\LaTeX} graph layout is not (yet) exactly the same, there is
perhaps the need for adjusting the graphs in the TikZ code.  The TikZ
program is very useful and we recommend it for many purposes, but
perhaps you don't have the time to read the 560 pages manual
\cite{TikZ}, so here is a short overview of the most important
commands for this kind of graphs.

Let's start with this graph in figure \ref{uglygraph}:

\scriptsize
\lstset{language=[LaTeX]TeX}
\begin{lstlisting}
\begin{tikzpicture}[scale=1]
\node (H11) at (200bp,200bp) [draw,circle split,fill=green!80] {$H11$ \nodepart{lower} $0.0333$};
...
\draw [->,line width=1pt] (H11) to[bend left=15] node[near start,above,fill=blue!20] {0.667} (H12);
...
\end{tikzpicture}
\end{lstlisting}
\normalsize

\begin{figure}[ht]
  \centering
% Chunk 23
<<echo=FALSE,results=tex>>=

cat(graph2latex(result@graphs[[3]], pvalues=pvalues, scale=0.7, fontsize="tiny"))

@
  \caption{\label{uglygraph}Graph from \texttt{graph2latex} that does not look optimal.}
\end{figure}

You can scale the TikZ graphic by changing the \texttt{[scale=1]}
option.  By default \texttt{graph2latex} doesn't scale TikZ graphics,
but has an optional parameter \texttt{scale}.

For an explanation what \texttt{green!80} means and how you can
specify other colors, please take a look at the xcolor manual
\cite{xcolor}.

You can choose between the following label positions \texttt{above,
  below, right, left, above right, above left, below right}, and
\texttt{below left}.  In addition these positions can take an optional
dimension argument, so that for example \texttt{below=1pt} can be used
to place a label below and additionally shift it 1pt downwards.

You can change the position where the edge weight label is placed to
\texttt{at start, very near start, near start, midway, near end, very
  near end} and \texttt{at end} or simply use something like
\texttt{pos=0.5}.  If you add an argument \texttt{sloped}, the text
label will be rotated so that a parallel line to the base line becomes
a tangent to the edge.

Often it is useful to reduce the bending angle in \texttt{[bend
    left=15]} below 15. You could also specify and change
\texttt{out=15} and \texttt{in=165} separately.

A powerful feature is the use of styles, since this will effect all
objects of a given class. But for this please take a look directly at
the TikZ manual \cite{TikZ}.

\section{Case Studies}\label{caseStudies}

This section is work in progress.

\subsection{Identifying effective and/or safe doses by stepwise confidence intervals for ratios}
In this subsection we show how to use gMCP to reproduce the results of the paper \cite{bretz2003identifying} with the same title.

\subsection{Testing strategies in multi-dose experiments including active control}

\cite{bauer1998testing}

\scriptsize
% Chunk 24
<<echo=TRUE, size=scriptsize>>=

data(hydroquinone)

pvalues <- c() 
x <- hydroquinone$micronuclei[hydroquinone$group=="C-"]
for (dose in c("30 mg/kg", "50 mg/kg", "75 mg/kg", "100 mg/kg", "C+")) {
	y <- hydroquinone$micronuclei[hydroquinone$group==dose]
	result <- wilcox.test(x, y, alternative="less", correct=TRUE)
	pvalues <- c(result$p.value,  pvalues)
}
pvalues

library(coin)
pvalues <- c() 
for (dose in c("30 mg/kg", "50 mg/kg", "75 mg/kg", "100 mg/kg", "C+")) {
	subdata <- droplevels(hydroquinone[hydroquinone$group %in% c("C-", dose),])
	result <- wilcox_test(micronuclei ~ group, data=subdata, distribution="exact")
	pvalues <- c(pvalue(result), pvalues)
}
pvalues

@
\normalsize

\begin{figure}[ht]
\begin{center}
% Chunk 25
<<echo=FALSE,fig=TRUE,width=8,height=6>>=

data(hydroquinone)
boxplot(micronuclei~group, data=hydroquinone)

@ 
\end{center}
\caption{\label{bpHydroquinone} Boxplot of the hydroquinone data set}
\end{figure}

\begin{appendix} 

\section{Appendix - Multiple Testing Basics}

Let $\Theta$ be a parameter space indexing a family of probabilities
$\{P_\theta\;|\;\theta\in\Theta\}$ and $(\Omega, \sF, P_\theta)$ the
associated probability spaces.  For a family of null hypotheses
$H_i\subset\Theta$, $i\in\{1,\ldots,n\}=:I$ a multiple test procedure
$\phi$ is defined as a family of $(\sF, \Pot(\{0,1\}^n))$-measurable
functions $\{\phi_J:\; \Omega \rightarrow \{0,1\}^n\;|\;J\subset I\}$
(we'll write $\phi_j$ for $\phi_{j}$). 

The family of hypotheses $\{H_i \;|\;i\in I\}$ is called
\emph{closed}\index{closed family} if it is closed under intersection. 

\begin{Def}
  Let $H_J:=\bigcap_{j\in J} H_j$. The multiple test procedure $\phi$
  controls the \emph{familywise error rate at level $\alpha$ in the
    weak sense} if
  \[\forall \theta\in H_I: \; P_\theta(\phi_J=1\text{ for some }J\subset I)\leq\alpha.\]
  The multiple test procedure $\phi$ controls the \emph{familywise
    error rate at level $\alpha$ in the strong sense} if
  \[\forall \theta\in\Theta: \; P_\theta(\phi_J=1\text{ and }\theta\in H_J\text{ for some }J\subset I)\leq\alpha.\]
\end{Def}

This section is work in progress.

\subsection{Closed testing principle}\index{Closed testing principle}

\begin{Def}[Coherence and Consonance]
  A multiple test procedure is called \emph{consonant}\index{consonance} if 
  \[\forall J\subset I:\; \left(\phi_J=1\;\Rightarrow\;\exists j\in J:\;\phi_j=1\right).\]

  A multiple test procedure is called \emph{coherent}\index{coherence} if
  \[\forall J,\,J'\subset I:\; \left(\phi_J=0\text{ and }J'\subset J\;\Rightarrow\;\phi_{J'}=0\right).\]

  For further reading see
  \cite{hochberg2009multiple} and \cite{gabriel1969simultaneous}
\end{Def}

\subsection{Partitioning principle}\index{Partitioning principle}

\begin{Def}

\end{Def}

\begin{Theorem}[Simes-Procedure]\index{Simes-Procedure} 
Let $T_1, \ldots, T_m$
be test statistics for $m\in\N$ null hypotheses $H_1, \ldots, H_m$ and
$p_1, \ldots, p_m$ the associated p-values. Then the following test
will control the familywise error rate at level $\alpha\in]0,1[$ in
    the strong sense:

Denote the ordered p-values by $p^{(1)}<p^{(2)}<\ldots<p^{(m)}$ 
and the corresponding hypotheses by $H^{(1)},H^{(2)},\ldots, H^{(m)}$.

Reject $H_0$ if
\[p^{(j)}\leq\frac{j\alpha}{n}\quad\text{for some $1\leq j\leq m$}.\]

For independent tests the FWER is controlled at level $\alpha$.
\end{Theorem}

\begin{Theorem}[Weighted Simes Procedure]\index{Weighted Simes Procedure} 
Benjamini and Hochberg (1997)

Let $\sum_{k=1}^m w_k = m$ and reject $H_0$ if
\[p^{(j)}\leq\frac{\sum_{k=1}^jw_[{(k)}}{m}\cdot\alpha\quad\text{for some $1\leq j\leq m$}.\]

\end{Theorem}

\subsubsection*{Adjusted p-Values in the Simes Test}

For each set $J\subset I$ we calculate
\[m_J := \min\limits_{j\in J}\left(\frac{p_j}{\sum_{i\in J_j}w_i}\right),\quad J_j=\{k\in J\;|\; p_k\leq p_j\}.\]

The weighted Simes Test rejects $H_J$ iff $m_J\leq\alpha$.
%for some $j \in J$
%\[p_j\leq\alpha \sum_{i\in J_j}w_i\]
%or equivalent
%\[\]

In a closed testing procedure a hypothesis $H_j$ is rejected iff $H_J$
is rejected for each $J\subset I$ with $j\in J$.

An adjusted p-pvalue $p'_j$ is defined as the minimal $\alpha$ so that
the test to global level $\alpha$ rejects $H_j$.

Therefore $p'_j=\text{max}(m_J\;|\;j\in J)$.

\section{Appendix - Graph Theory Basics}

When we talk about graphs in the context of gMCP we always mean finite,
directed, weighted graphs with no self-loops and no parallel edges:

\begin{Def}
 In our context a (valid) \emph{graph} $G$ is a triple $G=(V,E,w)$
 of a non-empty, finite set $V$ of nodes together with the set of edges
 $E\subset (V\times V)\setminus\{(v,v)\;|\;v\in V\}$ and a mapping $w:\;V\cup
 E\rightarrow [0,1]$ that fullfills $\sum_{v\in V}w(v)\leq1$ and $w(e)>0$ for
 each edge $e\in E$.
\end{Def}

Isomorphisms.

\begin{Theorem}[Unimprovable graph] 
 Let $G=(V,E,w)$ be a graph with $\sum_{v\in V}w(v)=1$.
 If for all $v, v'\in V$, $v\neq v'$ with $w(v)>0$ a path from $v$ to $v'$
 exists, than there is no other graph with an uniformly better
 associated test statistic.
\begin{Proof}
\end{Proof}

\end{Theorem}

\end{appendix}

\newpage

\addcontentsline{toc}{section}{Index}
\printindex

\newpage

\listofalgorithms
\listoffigures
\listoftables

\newpage

\addcontentsline{toc}{section}{Literatur}
\bibliography{literatur}

\addcontentsline{toc}{section}{Table of Symbols}
\section*{Table of Symbols}\footnotesize
%\twocolumn[\section{Symbolverzeichnis}]
\begin{tabularx}{\textwidth}{lX}
\multicolumn{2}{l}{\textbf{Sets}}\\
\R& set of real numbers\\
\NN& set of natural numbers (including 0)\\
$\Pot(X)$ & power set of set $X$, i.e.\ the set of all subsets of $X$\\
\\
%\multicolumn{2}{l}{\textbf{Relationen}}\\
%$X\Subset Y$& $X$ ist relativ kompakt in $Y$\\
%\end{tabularx}\\
%\begin{tabularx}{\textwidth}{lX}
\multicolumn{2}{l}{\textbf{Functions}}\\
$\skp{\cdot,\cdot}$ & standard direct product $\skp{x,y}=\sum_{j=1}^nx_j\cdot y_j$ for $x,y\in\R^n$\\
$\id_X$ & identity on $X$, i.e.\ $\id_X:\;X\rightarrow X,\;x\mapsto x$\\
%\\
%\multicolumn{2}{l}{\textbf{Andere Symbole}}\\
\end{tabularx}
%\onecolumn

\normalsize

\newpage


\end{document}
