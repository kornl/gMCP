\documentclass[a4paper, 10pt]{article}
\usepackage[T1]{fontenc}
\usepackage{url}
\usepackage{Sweave}
\usepackage{graphicx}
\usepackage{tikz}
\usetikzlibrary{snakes,arrows,shapes}
\usepackage[margin=0.9in]{geometry}
\usepackage{url}
\usepackage{hyperref}
\usepackage{listings}
\usepackage{xspace}
\usepackage{tabularx}
\usepackage{makeidx}\makeindex
\usepackage[numbers]{natbib}
\usepackage{algorithmic} 
\usepackage{algorithm}
%\usepackage[left=3cm,right=3cm,top=2cm,bottom=2cm]{geometry}
\usepackage{amsmath,amsthm,amsfonts,amssymb}
\bibliographystyle{plainnat}
\setlength{\parindent}{0mm}
\setlength{\parskip}{1mm}
\newcommand{\commentout}[1]{}
\renewcommand{\hlcomment}[1]{\textcolor[rgb]{0.4,0.4,0.4}{#1}}
\renewcommand{\theequation}{\thesection.\arabic{\equation}}
\numberwithin{equation}{section}

\theoremstyle{definition}
\newtheorem{Def}{Definition}[section]
\newtheorem{Rem}[Def]{Remark}
\newtheorem{RemDef}[Def]{Remark und Definition}
\newtheorem{DefRem}[Def]{Definition und Remark}
\newtheorem{Example}[Def]{Example}
\theoremstyle{plain}
\newtheorem{Theorem}[Def]{Theorem}
\newtheorem{DefTheorem}[Def]{Definition and Theorem}
\newtheorem{Corollary}[Def]{Corollary}
\newtheorem{Lemma}[Def]{Lemma}

\newcommand{\C}{\ensuremath{\mathbb{C}}\xspace}
\newcommand{\R}{\ensuremath{\mathbb{R}}\xspace}
\newcommand{\Q}{\ensuremath{\mathbb{Q}}\xspace}
\newcommand{\Z}{\ensuremath{\mathbb{Z}}\xspace}
\newcommand{\NN}{\ensuremath{\mathbb{N}_0}\xspace}
\newcommand{\N}{\ensuremath{\mathbb{N}}\xspace}
\newcommand{\sF}{\ensuremath{\mathcal{F}}\xspace}
\newcommand{\Pot}{\ensuremath{\mathfrak{Pot}}\xspace}

\DeclareMathOperator{\range}{range}

\newcommand{\skp}[1]{\left\langle#1\right\rangle}

\renewcommand{\epsilon}{\varepsilon}
\renewcommand{\phi}{\varphi}
\newcommand{\id}{\text{id}}

\newenvironment{Proof}{\par\noindent\upshape\textit{Proof. }\nopagebreak}{\qed\par}

\usepackage{setspace}
\onehalfspacing

\begin{document}

% \VignetteIndexEntry{A Graphical Approach to Weighted Multiple Test Procedures}
% \VignetteDepends{coin}

\title{gMCP - an R package for a graphical approach to weighted multiple test procedures} 

\author{Kornelius Rohmeyer}

\maketitle

\newpage

\tableofcontents

% Bibliotheken - Chunk 1
<<echo=FALSE,results=hide>>=

library(gMCP)
options(width=140)
options(digits=4)
gMCPReport <- function(...) {invisible(NULL)}
graphGUI <- function(...) {invisible(NULL)}
#options(prompt="> ", continue="+ ")

@

\newpage

\section{Introduction}

This package provides functions and graphical user interfaces for
graph based multiple test procedures.  These graphs define a weighting
strategy for all subsets of null hypotheses and following the closed
test procedure weighted tests can be performed on these subsets
leading to a multiple test procedure controlling the family wise error
rate in the strong sense. In some cases shortcuts are available, for
example the weighted Bonferroni procedure leads to a sequentially
rejective multiple test procedure.

At all steps either graphical user interfaces or the R Console with S4
objects and methods can be used.

Please note that this is still a beta release and the API will most
likely still change in future versions.

\subsection{Installation}

Open R and type \texttt{install.packages("gMCP")}, 
select an arbitrary mirror and gMCP will be downloaded and installed.

From now on you can load the gMCP package by entering
\texttt{library(gMCP)} into the R Console.
The graphical user interface is started with the command \texttt{graphGUI()}.

If you run into problems, see
\url{http://cran.r-project.org/web/packages/gMCP/INSTALL} or write us
an email at
\href{mailto:help@small-projects.de}{\texttt{help@small-projects.de}}.

\subsection{Example and diving in}

Let's start with a well-known procedure and see how it fits into this
graphical approach to weighted multiple test procedures: The
Bonferroni-Holm-Procedure \cite{Holm79}.

\begin{Theorem}[Bonferroni-Holm-Procedure]\index{Bonferroni-Holm-Procedure} 
Let $T_1, \ldots, T_m$
be test statistics for $m\in\N$ null hypotheses $H_1, \ldots, H_m$ and
$p_1, \ldots, p_m$ the associated p-values. Then the following test
will control the familywise error rate at level $\alpha\in]0,1[$ in
    the strong sense:

Denote the ordered p-values by $p^{(1)}<p^{(2)}<\ldots<p^{(m)}$ 
and the corresponding hypotheses by $H^{(1)},H^{(2)},\ldots, H^{(m)}$.

Reject $H^{(1)},H^{(2)},\ldots, H^{(j)}$ such that 
\[p^{(i)}\leq\frac{\alpha}{n-i+1}\quad\text{for all $1\leq i\leq j$}.\]
\end{Theorem}

The corresponding graph for the Bonferroni-Holm-Procedure for three
hypotheses is given in Figure \ref{exampleHolm}.  We see a fully
connected graph, where each node represents a hypothesis and the nodes
and edges have weights.

\begin{figure}[ht]
  \centering
% Chunk 2
<<echo=FALSE,results=tex>>=

graph <- BonferroniHolmGraph(3)
cat(graph2latex(graph, scale=0.7, fontsize="tiny", labelTikZ="near start,fill=blue!20"))

@
  \caption{\label{exampleHolm} Graph representing the
    Bonferroni-Holm-Procedure for three hypotheses.}
\end{figure}

A null hypothesis can be rejected, when the p-value is less than the
alpha level of the corresponding node.  In this case the graph will be
updated and the alpha level of this node is passed according to the
edge weights.

\begin{Example}
  We give an example for the Bonferroni-Holm-Procedure that will
  be used repeatedly throughout this manual. Of course this 
  package is made for more advanced tests (you find a selection in 
  section \ref{caseStudies}),
  but since most readers are already familiar with this procedure,
  for a first introduction of gMCP, we stick to this simple example.  
  
  Let $p_1=0.01$, $p_2=0.07$ and $p_3=0.02$ be three p-values and
  $\alpha=0.05$.  In the first step $H_1$ can be rejected since
  $p_1<\alpha/3$.  The updated graph can be seen in figure
  \ref{exampleHolmP} and now also $H_3$ can be rejected since
  $p_1<\alpha/2$.  Again the graph is updated, but $H_2$
  can not be rejected.
\end{Example}

\begin{figure}[ht]
  \centering
% Chunk 3
<<echo=FALSE,results=tex>>=

graph <- BonferroniHolmGraph(3)
cat(graph2latex(graph, scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm"))
cat("$\\downarrow$ reject $H_1$\\\\")
graph <- rejectNode(graph, "H1")
cat(graph2latex(graph, scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm"))
cat("$\\downarrow$ reject $H_3$\\\\")
graph <- rejectNode(graph, "H3")
cat(graph2latex(graph, scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm"))

@
  \caption{\label{exampleHolmP} Example showing how two
    null hypotheses can be rejected with p-values $p_1=0.01$,
    $p_2=0.07$ and $p_3=0.02$.}
\end{figure}

Let's reproduce this with the \texttt{gMCP} package. We start R and enter:

\scriptsize
% Chunk 4
<<echo=TRUE, size=scriptsize>>=

library(gMCP)
graphGUI()

@
\normalsize

The GUI seen in Figure \ref{fullGUI} is shown and we select from the
menu "\emph{Example graphs}" the entry "\emph{Bonferroni-Holm Test}".
We enter the three p-values in the respective fields on the right
side.  By clicking on the button with the green arrow we start the
test procedure and can sequentially reject all three hypotheses.

If we don't want to use the GUI we can also use R:

\scriptsize
% Chunk 5
<<echo=TRUE, size=scriptsize>>=

library(gMCP)
graph <- BonferroniHolmGraph(3)
gMCP(graph, pvalues=c(0.01,0.07,0.02), alpha=0.05)

@
\normalsize

\section{Basic Theoretical Background}

\begin{algorithm}
\caption{Removing node $i$, passing the weight and updating the graph edges}
\label{rmNodeAlg}
\begin{algorithmic}
\FOR{$l \in I$} 
  \STATE $w_l \gets w_l+w_i\cdot g_{il}$
  \FOR{$k \in I$}    
    \IF{$l \neq k$ \textbf{and} $g_{lj}\cdot g_{jl}\neq1$}
      \STATE $g_{lk} \gets \frac{g_{lk}+g_{lj}\cdot g_{jk}}{1-g_{lj}\cdot g_{jl}}$
    \ELSE
      \STATE $g_{lk} \gets 0$
    \ENDIF    
  \ENDFOR
\ENDFOR
\end{algorithmic}
\end{algorithm}

\section{Creating Weighted Graphs}

In the first step a graph that describes the multiple test procedures
must be created.

\begin{figure}[ht]
  \centering   
% Chunk 6
<<echo=FALSE,results=tex>>=

graph <- graphFromBretzEtAl2011()
cat(graph2latex(graph, scale=0.7, fontsize="tiny"))

@
  \caption{\label{exampleGraphBretz} Example graph from \cite{bretzEtAl2009power} that we will create in this vignette.}
\end{figure}

\subsection{Using R}

The most convenient way to create a graph in R is to use the functions
\texttt{matrix2graph}\index{matrix2graph} and
\texttt{setWeights}\index{setWeights}.  As an example we create the
graph from Bretz et al. \cite{bretzEtAl2009power} that you can see in
figure \ref{exampleGraphBretz}.


\scriptsize
% Chunk 7
<<echo=TRUE, size=scriptsize>>=

m <- rbind(H11=c(0,   0.5, 0,   0.5, 0,   0  ),
           H21=c(1/3, 0,   1/3, 0,   1/3, 0  ),
           H31=c(0,   0.5, 0,   0,   0,   0.5),
           H12=c(0,   1,   0,   0,   0,   0  ),
           H22=c(0.5, 0,   0.5, 0,   0,   0  ),
           H32=c(0,   1,   0,   0,   0,   0  ))

graph <- matrix2graph(m)
graph <- setWeights(graph, c(1/3, 1/3, 1/3, 0, 0, 0))

@
\normalsize

Let's print the newly created graph:

\scriptsize
% Chunk 8
<<echo=TRUE, size=scriptsize>>=

print(graph)

@
\normalsize

Since we also want to visualize the graph, we use the method
\texttt{nodeRenderInfo}\index{nodeRenderInfo} from package \texttt{graph} to set appropriate
x- and y-coordinates in the renderInfo.  (We are compatible to the
renderInfo usage from package Rgraphviz \cite{Rgraphviz}.)

\scriptsize
% Chunk 9
<<echo=TRUE, size=scriptsize>>=

graph@nodeData$X <- c(H11=100, H21=300, H31=500, H12=100, H22=300, H32=500)
graph@nodeData$Y <- c(H11=100, H21=100, H31=100, H12=300, H22=300, H32=300)	

@
\normalsize

For placement of the nodes in a matrix pattern, the function \texttt{placeNodes} is helpful.
The following code does the same as the three lines of R code above.  

\scriptsize
% Chunk 10
<<echo=TRUE, size=scriptsize>>=

graph <- placeNodes(graph, nrow=2)

@
\normalsize

Coordinates are interpretated as pixels in the GUI and big points in
{\LaTeX} (72 bp = 1 inch).\index{coordinates}

Let's take a look at the graph in {\LaTeX} rendered with TikZ
\cite{TikZ}\index{TikZ} (you can see the compiled result in figure
\ref{exampleGraphBretz}):

\scriptsize
%\lstset{language=[LaTeX]TeX}
%\begin{lstlisting}
% Chunk 11
<<echo=TRUE, size=scriptsize>>=

cat(graph2latex(graph))

@
%\end{lstlisting}
\normalsize

We can even change the position of the edge labels for further fine
tuning of the graphical representation.  With the following command we
place the label for the edge from \texttt{H1} to \texttt{H2} at
position (200, 80):

\scriptsize
% Chunk 12
<<echo=TRUE, size=scriptsize>>=

edgeData(graph, "H11", "H21", "labelX") <- 200
edgeData(graph, "H11", "H21", "labelY") <- 80

@
\normalsize

\subsection{Using the GUI}

The creation of \texttt{graphMCP} objects as seen in the last section 
with basic R commands is very straight forward,
but still takes some time and typos may occur.  More convenient for
the average user is the use of the graphical user interface for
creating and editing MCP graphs that the \texttt{gMCP} package
includes.

It is called by the command \texttt{graphGUI()} and takes as optional
argument a variable name, given as a character string, of the graph to
edit.
% or under which a newly created \texttt{graphMCP} object will be
% available from the R command line.

\scriptsize
% Chunk 13
<<echo=TRUE, size=scriptsize>>=

graphGUI("graph")

@
\normalsize

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.95\textwidth]{pictures/FullFeaturedGUI.png}      
  \caption{\label{fullGUI} The graphical user interface allows testing, calculation of confidence intervals and adjusted p-values.}
\end{figure}

Let's take a look at the icon panel:

\includegraphics[width=0.5cm]{pictures/vertex.png} This button lets
you add a new node to the graph.  After pressing the button click
somewhere on the graph panel and a new node will appear at this place.

\includegraphics[width=0.5cm]{pictures/edge.png} This button lets you
add a new edge between two nodes.  After pressing the button click on
the node the edge should start and after that on the node the edge
should end.

\includegraphics[width=0.5cm]{pictures/zoom_in.png}
\includegraphics[width=0.5cm]{pictures/zoom_out.png} For really big
graphs the ability to zoom in and out is usefull.

\includegraphics[width=0.5cm]{pictures/StartTesting.png}
\includegraphics[width=0.5cm]{pictures/Reset.png} Starts the testing
procedure / goes back to the graph modification.

\includegraphics[width=0.5cm]{pictures/adjPval.png} Calculates the
adjusted p-values.

\includegraphics[width=0.5cm]{pictures/confint2.png} Calculates
simultaneous confidence intervals.

With drag and drop you can move nodes and also adjust edges.

\section{The sequentially rejective MTP}

For a full description of the sequentially rejective multiple testing
procedure take a look at Bretz et al. \cite{bretzEtAl2009graphical}. 

\subsection{Using R}

You can either specify each rejection step yourself or simply use the 
method \texttt{gMCP}:

\scriptsize
% Chunk 14
<<echo=TRUE,keep.source=TRUE, size=scriptsize>>=

graph <- graphFromBretzEtAl2011()

# We can reject a single node:
print(rejectNode(graph, "H11"))

# Or given a vector of pvalues let the function gMCP do all the work:  
pvalues <- c(0.1, 0.008, 0.005, 0.15, 0.04, 0.006)
result <- gMCP(graph, pvalues)
print(result)

@
\normalsize

We can create a TikZ graphic from the last graph with 
\texttt{graph2latex(result@graphs[[4]])} that is shown in figure \ref{finalstate}.

\begin{figure}[ht]
  \centering   
% Chunk 15
<<echo=FALSE,results=tex>>=

#TODO Enable this again.
#cat(graph2latex(result@graphs[[4]], scale=0.7, fontsize="tiny"))

@
  \caption{\label{finalstate}Final graph from the test procedure after rejection of $H_{21}$, $H_{31}$ and $H_{32}$.}
\end{figure}

The command \texttt{gMCPReport}\index{report generation} generates a
full report of the testing procedure:

\scriptsize
% Chunk 16
<<echo=TRUE, size=scriptsize>>=

gMCPReport(result, "Report.tex")

@
\normalsize

\subsubsection{Adjusted p-values and simultaneous confidence intervals}\index{adjusted p-values}\index{simultaneous confidence intervals}

Also adjusted p-values and simultaneous confidence intervals can be computed.

% Chunk 17
<<echo=FALSE,results=hide>>=

d1 <- c(1.68005156523844, 1.95566697423700, 0.00137860945822299, 0.660052238622464, 
		1.06731835721526, 0.39479303427265, -0.312462050794408, 0.323637755662837, 
		0.490976552328251, 2.34240774442652)

d2 <- c(0.507878380203451, 1.60461475524144, 2.66959621483759, 0.0358289240280020, 
		-1.13014087491324, 0.792461583741794, 0.0701657425268248, 3.15360436883856, 
		0.217669661552567, 1.23979492014026)

d3 <- c(-1.31499425534849, 1.62201370145649, 0.89391826766116, 0.845473572033649, 
		2.17912435223573, 1.07521368050267, 0.791598289847664, 1.58537210294519, 
		-0.079778759456515, 0.97295072606043)

est <- c(0.860382, 0.9161474, 0.9732953)
s <- c(0.8759528, 1.291310, 0.8570892)
pval <- c(0.01260, 0.05154, 0.02124)/2

df <- 9
# Statistics:
st <- qt(pval/2, df=df, lower.tail=FALSE)
# Estimates:
est <- st*s/sqrt(10)

@

Let's assume the tests for hypotheses $H1:\;\theta_1\leq0$,
$H2:\;\theta_2\leq0$ and $H3:\;\theta_3\leq0$ are three t-tests with degree
of freedom 9.  The estimates are
$\hat\theta_1=\Sexpr{format(est[1])}$,
$\hat\theta_2=\Sexpr{format(est[2])}$ and
$\hat\theta_3=\Sexpr{format(est[3])}$, the sample standard deviations
$s_1=\Sexpr{format(s[1])}$,
$s_2=\Sexpr{format(s[2])}$ and
$s_3=\Sexpr{format(s[3])}$ the t-statistics
$\Sexpr{format(st[1])}$, $\Sexpr{format(st[2])}$ and
$\Sexpr{format(st[3])}$ and the corresponding p-values $\Sexpr{format(pval[1])}$, 
$\Sexpr{format(pval[2])}$ and
$\Sexpr{format(pval[3])}$.  We want to adjust for multiple testing
by using the Bonferroni-Holm-Procedure with $\alpha=0.025$.

\scriptsize
% Chunk 18
<<echo=TRUE, keep.source=TRUE, size=scriptsize>>=

# Estimates:
est <- c("H1"=0.860382, "H2"=0.9161474, "H3"=0.9732953)
# Sample standard deviations:
ssd <- c("H1"=0.8759528, "H2"=1.291310, "H3"=0.8570892)

pval <- c(0.01260, 0.05154, 0.02124)/2

simConfint(BonferroniHolmGraph(3), pvalues=pval, 
		confint=function(node, alpha) {
			c(est[node]-qt(1-alpha,df=9)*ssd[node]/sqrt(10), Inf)
		}, estimates=est, alpha=0.025, mu=0, alternative="greater")

# Note that the sample standard deviations in the following call
# will be calculated from the pvalues and estimates.
simConfint(BonferroniHolmGraph(3), pvalues=pval, 
		confint="t", df=9, estimates=est, alpha=0.025, alternative="greater")

@
\normalsize

\subsection{Using the GUI}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/CIDialog.png}      
  \caption{\label{CIDialog} For normal and t-distributions simultaneous CI can be calculated by the GUI.}
\end{figure}


Use the following two buttons:
\includegraphics[width=1cm]{pictures/adjPval_b.png}
\includegraphics[width=1cm]{pictures/confint2_b.png}

See \cite{Bretz11}.

\section{Weighted parametric tests}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/correlated.png}      
  \caption{\label{correlated} You can also specify a correlation between the tests.}
\end{figure}

In the lower right panel with p-values, it is also possible to specify a known correlation between these values (see figure \ref{correlated}).
 

For further information please take a look at the vignette "\emph{Weighted parametric tests defined by graphs}".

\section{Epsilon edges}\index{epsilon edges}

%\begin{Def}
  %Convergence in distribution
  %Convergence in probability
  %Almost sure convergence
  %Sure convergence
  %Convergence in the r-th mean
%\end{Def}

The GUI supports epsilon edges. You can enter the weights in R syntax,
e.g.\ \texttt{1-2*\textbackslash epsilon+1/3*\textbackslash epsilon\^{}2} for $1-2\epsilon+\frac{1}{3}\epsilon^2$.

\begin{figure}[ht]
  \centering
  \begin{tikzpicture}[scale=0.7]
% Chunk 19
<<echo=FALSE,results=tex>>=

cat(graph2latex(graphForParallelGatekeeping(), scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm", tikzEnv=FALSE))
cat(graph2latex(graphForImprovedParallelGatekeeping(), scale=0.7, fontsize="tiny", nodeTikZ="minimum size=1.2cm", tikzEnv=FALSE, offset=c(300, 0)))

@
\end{tikzpicture}
  \caption{\label{gatekeeping}\index{parallel gatekeeping}\index{gatekeeping!parallel}\index{gatekeeping!improved parallel} The Parallel Gatekeeping and the Improved Parallel Gatekeeping Procedure.}
\end{figure}

\commentout{

Algorithm of Bretz et al. \cite{bretzEtAl2009power} for rejecting a node:

\[\alpha_l \leftarrow \begin{cases}\alpha_l+a_jg_{jl}&l\in I\\0&\text{otherwise}\end{cases}\]

\[g_{lk} \leftarrow \begin{cases}\frac{g_{lk}+g_{lj}g_{jk}}{1-g_{lj}g_{jl}}&k,l\in I, l\neq k, g_{lj}g_{jl}<1\\0&\text{otherwise}\end{cases}\]

We want now investigate what happens if a edge weight $\epsilon>0$ approaches $0$.
In respect to 

\[\alpha_l \leftarrow \begin{cases}0=\lim\limits_{g_{jl}\rightarrow0}(\alpha_l+a_jg_{jl})&l\in I\\0&\text{otherwise}\end{cases}\]

The only question is, what happens if and $l\in I, l\neq k, g_{lj}g_{jl}<1$.
If $g_{lj}g_{jl}==1$ still $g_{lk}<-0$.
 
\[\lim\limits_{g_{jl}\rightarrow0}\left(\frac{g_{lk}+g_{lj}g_{jk}}{1-g_{lj}g_{jl}}\right)
=\begin{cases}
  \frac{g_{lk}+g_{lj}g_{jk}}{1-g_{lj}g_{jl}}&g_{lj}g_{jl}<1\\
  0&g_{lj}g_{jl}=1\\a\\b\\\end{cases}
=\]
}


\scriptsize
% Chunk 20
<<echo=TRUE, keep.source=TRUE, size=scriptsize>>=

m <- rbind(H1=c(0,           0,           0.5,           0.5          ),
           H2=c(0,           0,           0.5,           0.5          ),
           H3=c("\\epsilon", 0,           0,             "1-\\epsilon"),
           H4=c(0,           "\\epsilon", "1-\\epsilon", 0            ))

graph <- matrix2graph(m)
#graph <- graphForImprovedParallelGatekeeping()
graph
substituteEps(graph, eps=0.001)

gMCP(graph, pvalues=c(0.02, 0.04, 0.01, 0.02), eps=0.001)

@
\normalsize

\section{Power Simulations}\index{power simulation}

No $\epsilon$-edges are allowed.

\begin{figure}[ht]
  \centering
% Chunk 21
<<echo=FALSE,results=tex>>=

cat(graph2latex(graph2FromBretzEtAl2011(), scale=0.7, fontsize="tiny"))

@
  \caption{\label{powergraph} Graph from Bretz et al. (2009)}
\end{figure}

\subsection{Variable edge weights}\index{edge weights!variable}

\includegraphics[width=5cm]{pictures/variableEditor.png}

\scriptsize
% Chunk 22
<<echo=TRUE, keep.source=TRUE, size=scriptsize>>=

graph <- graph2FromBretzEtAl2011()
graph

@
\normalsize

\section{Options and Import/Export}

\subsection{Options}\index{options}

This subsection is work in progress, but fortunately the options in
figure \ref{optionsDialog} should be fairly self-explanatory.

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{pictures/optionsDialog.png}      
  \caption{\label{optionsDialog} You can configure many things in the option dialog.}
\end{figure}

\subsubsection{Privacy}

The GUI is able to connect to our server to
\begin{enumerate}
  \item check whether a new version of gMCP exists,  
  \item send a wishlist if the user chooses to,
%  \item submit/load a graph to the online archive 
  \item send bug reports if an error occurs.
\end{enumerate}

Only in the last case of a bug report some information about your computer
is collected that can be reviewed by the user before sending the bug report.
If you do not agree with sending this data, simply don't send a problematic bug report
or if you never want to send bug reports, disable the option in the options menu. 

\subsection{Import/Exports}\index{import}\index{export}

This subsection is work in progress, but fortunately the menu entries
in figure \ref{fileMenu} should be fairly self-explanatory.

You can export graphs to png files.  The background of these png files
will be made transperant, so that they will fit into whichever
document you insert them.  Note that some image viewers visualize
transparency with a checkerboard pattern.

\begin{figure}[ht]
  \centering    
  \includegraphics[width=4cm]{pictures/filemenu.png}      
  \caption{\label{fileMenu} Import and export of graphs.}
\end{figure}

\subsection{Important TikZ commands for optimizing the reports}\index{graph2latex}\index{TikZ}
A clear automatic placement of edges and weight labels without
overlapping is a very difficult task and for complicated graphs the
\texttt{gMCP} package will often fail to accomplish this.  There is
the possibilty to adjust the edges and labels in the GUI, but since
the {\LaTeX} graph layout is not (yet) exactly the same, there is
perhaps the need for adjusting the graphs in the TikZ code.  The TikZ
program is very useful and we recommend it for many purposes, but
perhaps you don't have the time to read the 560 pages manual
\cite{TikZ}, so here is a short overview of the most important
commands for this kind of graphs.

Let's start with this graph in figure \ref{uglygraph}:

\scriptsize
\lstset{language=[LaTeX]TeX}
\begin{lstlisting}
\begin{tikzpicture}[scale=1]
\node (H11) at (200bp,200bp) [draw,circle split,fill=green!80] {$H11$ \nodepart{lower} $0.0333$};
...
\draw [->,line width=1pt] (H11) to[bend left=15] node[near start,above,fill=blue!20] {0.667} (H12);
...
\end{tikzpicture}
\end{lstlisting}
\normalsize

\begin{figure}[ht]
  \centering
% Chunk 23
<<echo=FALSE,results=tex>>=

cat(graph2latex(result@graphs[[3]], pvalues=pvalues, scale=0.7, fontsize="tiny"))

@
  \caption{\label{uglygraph}Graph from \texttt{graph2latex} that does not look optimal.}
\end{figure}

You can scale the TikZ graphic by changing the \texttt{[scale=1]}
option.  By default \texttt{graph2latex} doesn't scale TikZ graphics,
but has an optional parameter \texttt{scale}.

For an explanation what \texttt{green!80} means and how you can
specify other colors, please take a look at the xcolor manual
\cite{xcolor}.

You can choose between the following label positions \texttt{above,
  below, right, left, above right, above left, below right}, and
\texttt{below left}.  In addition these positions can take an optional
dimension argument, so that for example \texttt{below=1pt} can be used
to place a label below and additionally shift it 1pt downwards.

You can change the position where the edge weight label is placed to
\texttt{at start, very near start, near start, midway, near end, very
  near end} and \texttt{at end} or simply use something like
\texttt{pos=0.5}.  If you add an argument \texttt{sloped}, the text
label will be rotated so that a parallel line to the base line becomes
a tangent to the edge.

Often it is useful to reduce the bending angle in \texttt{[bend
    left=15]} below 15. You could also specify and change
\texttt{out=15} and \texttt{in=165} separately.

A powerful feature is the use of styles, since this will effect all
objects of a given class. But for this please take a look directly at
the TikZ manual \cite{TikZ}.

\section{Case Studies}\label{caseStudies}

This section is work in progress.

\subsection{Identifying effective and/or safe doses by stepwise confidence intervals for ratios}
In this subsection we show how to use gMCP to reproduce the results of the paper \cite{bretz2003identifying} with the same title.

\subsection{Testing strategies in multi-dose experiments including active control}

\cite{bauer1998testing}

\scriptsize
% Chunk 24
<<echo=TRUE, size=scriptsize>>=

data(hydroquinone)

pvalues <- c() 
x <- hydroquinone$micronuclei[hydroquinone$group=="C-"]
for (dose in c("30 mg/kg", "50 mg/kg", "75 mg/kg", "100 mg/kg", "C+")) {
	y <- hydroquinone$micronuclei[hydroquinone$group==dose]
	result <- wilcox.test(x, y, alternative="less", correct=TRUE)
	pvalues <- c(result$p.value,  pvalues)
}
pvalues

library(coin)
pvalues <- c() 
for (dose in c("30 mg/kg", "50 mg/kg", "75 mg/kg", "100 mg/kg", "C+")) {
	subdata <- droplevels(hydroquinone[hydroquinone$group %in% c("C-", dose),])
	result <- wilcox_test(micronuclei ~ group, data=subdata, distribution="exact")
	pvalues <- c(pvalue(result), pvalues)
}
pvalues

@
\normalsize

\begin{figure}[ht]
\begin{center}
% Chunk 25
<<echo=FALSE,fig=TRUE,width=8,height=6>>=

data(hydroquinone)
boxplot(micronuclei~group, data=hydroquinone)

@ 
\end{center}
\caption{\label{bpHydroquinone} Boxplot of the hydroquinone data set}
\end{figure}

\begin{appendix} 

\section{Appendix - Multiple Testing Basics}

Let $\Theta$ be a parameter space indexing a family of probabilities $\{P_\theta\;|\;\theta\in\Theta\}$
and $(\Omega, \sF, P_\theta)$ the associated probability spaces.
For a family of null hypotheses $H_i\subset\Theta$, $i\in\{1,\ldots,n\}=:I$ a multiple test procedure $\phi$
is defined as a family of $(\sF, \Pot(\{0,1\}^n))$-measurable functions $\{\phi_J:\; \Omega \rightarrow \{0,1\}^n\;|\;J\subset I\}$.

\begin{Def}
  Let $H_J:=\bigcap_{j\in J} H_j$. The multiple test procedure $\phi$ controls the \emph{familywise error rate at level $\alpha$ in the weak sense} if 
  \[\forall \theta\in H_I: \; P_\theta(\phi_J=1\text{ for some }J\subset I)\leq\alpha.\]
  The multiple test procedure $\phi$ controls the \emph{familywise error rate at level $\alpha$ in the strong sense} if 
  \[\forall \theta\in\Theta: \; P_\theta(\phi_J=1\text{ and }\theta\in H_J\text{ for some }J\subset I)\leq\alpha.\]
\end{Def}

This section is work in progress.

\subsection{Closed testing principle}\index{Closed testing principle}

\subsection{Partitioning principle}\index{Partitioning principle}

\begin{Def}

\end{Def}

\end{appendix}

\newpage

\addcontentsline{toc}{section}{Index}
\printindex

\newpage

\listofalgorithms
\listoffigures
\listoftables

\newpage

\addcontentsline{toc}{section}{Literatur}
\bibliography{literatur}

\addcontentsline{toc}{section}{Table of Symbols}
\section*{Table of Symbols}\footnotesize
%\twocolumn[\section{Symbolverzeichnis}]
\begin{tabularx}{\textwidth}{lX}
\multicolumn{2}{l}{\textbf{Sets}}\\
\R& set of real numbers\\
\NN& set of natural numbers (including 0)\\
$\Pot(X)$ & power set of set $X$, i.e.\ the set of all subsets of $X$\\
\\
%\multicolumn{2}{l}{\textbf{Relationen}}\\
%$X\Subset Y$& $X$ ist relativ kompakt in $Y$\\
%\end{tabularx}\\
%\begin{tabularx}{\textwidth}{lX}
\multicolumn{2}{l}{\textbf{Functions}}\\
$\skp{\cdot,\cdot}$ & standard direct product $\skp{x,y}=\sum_{j=1}^nx_j\cdot y_j$ for $x,y\in\R^n$\\
$\id_X$ & identity on $X$, i.e.\ $\id_X:\;X\rightarrow X,\;x\mapsto x$\\
%\\
%\multicolumn{2}{l}{\textbf{Andere Symbole}}\\
\end{tabularx}
%\onecolumn

\normalsize

\newpage


\end{document}
