\documentclass[a4paper, 11pt]{article}
\usepackage[OT1]{fontenc}
\usepackage{url}
\usepackage{Sweave}
\usepackage{graphicx}
\usepackage{tikz}
\usetikzlibrary{snakes,arrows,shapes}
\usepackage[margin=0.9in]{geometry}
\usepackage{url}
\usepackage{hyperref}
\usepackage{listings}
\usepackage[numbers]{natbib}
\bibliographystyle{plainnat}
\setlength{\parindent}{0mm}
\setlength{\parskip}{1mm}
\begin{document}

% \VignetteIndexEntry{A Graphical Approach to Sequentially Rejective Multiple Test Procedures}

\title{gsrmtp - an R package for a graphical approach to sequentially
  rejective multiple test procedures} 

\author{Kornelius Rohmeyer}

\maketitle

\tableofcontents

% Bibliotheken
<<echo=FALSE,results=hide>>=

library(gMCP)
options(width=140)

@

\section{Introduction}

This package provides functions and graphical user interfaces for sequentially rejective multiple test procedures.

At all steps either graphical user interfaces or the R Console, S4 objects and methods can be used.   

\section{Creating the graph}

In the first step a graph that describes the multiple test procedures
must be created.

\begin{figure}[ht]
  \centering   
<<echo=FALSE,results=tex>>=

hnodes <- c("H11", "H21", "H31", "H12", "H22", "H32")
alpha <- c(0.05/3, 0.05/3, 0.05/3, 0, 0, 0)
edges <- list()
edges[["H11"]] <- list(edges=c("H21","H12"), weights=c(1/2, 1/2))
edges[["H21"]] <- list(edges=c("H11","H31","H22"), weights=c(1/3, 1/3, 1/3))
edges[["H31"]] <- list(edges=c("H21","H32"), weights=c(1/2, 1/2))
edges[["H12"]] <- list(edges="H21", weights=1)
edges[["H22"]] <- list(edges=c("H11","H31"), weights=c(1/2, 1/2))
edges[["H32"]] <- list(edges="H21", weights=1)
graph <- new("graphSRMTP", nodes=hnodes, edgeL=edges, alpha=alpha)
nodeX <- c(H11=100, H21=300, H31=500, H12=100, H22=300, H32=500)
nodeY <- c(H11=300, H21=300, H31=300, H12=100, H22=100, H32=100)
nodeRenderInfo(graph) <- list(nodeX=nodeX, nodeY=nodeY)	
cat(graph2latex(graph, scale=0.7, fontsize="tiny"))

createGsrmtpReport <- function(...) {invisible(NULL)}
graphGUI <- function(...) {invisible(NULL)}
options(digits=4)

@
  \caption{\label{exampleGraphBretz} Example graph from \cite{bretzEtAl2009power} that we will create in this vignette.}
\end{figure}

\subsection{Using R}

We build upon the package \texttt{graph} \cite{graph}, more precisely
we declare a new class \texttt{graphSRMTP} that is a subclass of
\texttt{graphNEL}.  The \texttt{initialize} method of this subclass
differs only in an extra argument \texttt{alpha}, the initial
allocation of the significance level alpha to the individual
hypotheses.  Declaration of the nodes and edges is inherited from
class \texttt{graphNEL}.

As an example we now create the graph from Bretz et al. \cite{bretzEtAl2009power}
that you can see in figure \ref{exampleGraphBretz}.

\scriptsize
<<echo=TRUE>>=

hnodes <- c("H11", "H21", "H31", "H12", "H22", "H32")
alpha <- c(0.05/3, 0.05/3, 0.05/3, 0, 0, 0)
edges <- list()
edges[["H11"]] <- list(edges=c("H21","H12"), weights=c(1/2, 1/2))
edges[["H21"]] <- list(edges=c("H11","H31","H22"), weights=c(1/3, 1/3, 1/3))
edges[["H31"]] <- list(edges=c("H21","H32"), weights=c(1/2, 1/2))
edges[["H12"]] <- list(edges="H21", weights=1)
edges[["H22"]] <- list(edges=c("H11","H31"), weights=c(1/2, 1/2))
edges[["H32"]] <- list(edges="H21", weights=1)
graph <- new("graphSRMTP", nodes=hnodes, edgeL=edges, alpha=alpha)

@
\normalsize

Let's print the newly created graph:

\scriptsize
<<echo=TRUE>>=

print(graph)

@
\normalsize

Since we also want to visualize the graph, we use the method
\texttt{nodeRenderInfo} from package \texttt{graph} to set appropriate
x- and y-coordinates in the renderInfo.
(We are compatible to the renderInfo usage from package Rgraphviz \cite{Rgraphviz}.)


\scriptsize
<<echo=TRUE>>=

nodeX <- c(H11=100, H21=300, H31=500, H12=100, H22=300, H32=500)
nodeY <- c(H11=300, H21=300, H31=300, H12=100, H22=100, H32=100)
nodeRenderInfo(graph) <- list(nodeX=nodeX, nodeY=nodeY)	

@
\normalsize

Coordinates are interpretated as pixels in the GUI and big points in {\LaTeX} (72 bp = 1 inch).

Let's take a look at the graph in {\LaTeX} rendered with TikZ
\cite{TikZ} (you can see the compiled result in figure
\ref{exampleGraphBretz}):

\scriptsize
%\lstset{language=[LaTeX]TeX}
%\begin{lstlisting}
<<echo=TRUE>>=

cat(graph2latex(graph))

@
%\end{lstlisting}
\normalsize

\subsection{Using the GUI}

The creation of \texttt{graphSRMTP} objects is very straight forward,
but still takes some time and typos may occur.
More convenient for the average user is the use of the graphical user interface for creating
and editing SRMTP graphs that the \texttt{gsrmtp} package includes.

It is called by the command \texttt{graphGUI()} and takes as optional argument a variable name,
given as a character string, of the graph to edit or under which a newly created
\texttt{graphSRMTP} object will be available from the R command line.

\scriptsize
<<echo=TRUE>>=

graphGUI("graph")

@
\normalsize

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.8\textwidth]{pictures/CreatingGraphs.png}      
  \caption{The graphical user interface of the package gsrmtp.}
\end{figure}

Let's take a look at the icon panel:

\includegraphics[width=0.5cm]{pictures/vertex.png} This button lets you add a new node to the graph.
After pressing the button click somewhere on the graph panel and a new node will appear at this place.

\includegraphics[width=0.5cm]{pictures/edge.png} This button lets you add a new edge between two nodes.
After pressing the button click on the node the edge should start and after that on the node the edge should end.

\includegraphics[width=0.5cm]{pictures/zoom_in.png} \includegraphics[width=0.5cm]{pictures/zoom_out.png}
For really big graphs the ability to zoom in and out is usefull.

\includegraphics[width=0.5cm]{pictures/latex.png} This button exports the graph as an {\LaTeX} TikZ picture.

%\includegraphics[width=0.5cm]{pictures/smiley.png} What this button does is up to to speculation. ;)

\includegraphics[width=0.5cm]{pictures/save.png} This button exports the graph back to R under the variable name
in the adjacent text field.  

\section{The sequentially rejective MTP}

For a full description of the sequentially rejective multiple testing
procedure take a look at Bretz et al. \cite{bretzEtAl2009graphical}. 

\subsection{Using R}

You can either specify each rejection step yourself or simply use the 
method \texttt{srmtp}:

\scriptsize
<<echo=TRUE>>=

graph <- createGraphFromBretzEtAl()
pvalues <- c(0.1, 0.008, 0.005, 0.15, 0.04, 0.006)
result <- srmtp(graph, pvalues)
print(result)

@
\normalsize

We can create a TikZ graphic from the last graph with 
\texttt{graph2latex(result@graphs[[4]])} that is shown in figure \ref{finalstate}.

\begin{figure}[ht]
  \centering   
<<echo=FALSE,results=tex>>=

cat(graph2latex(result@graphs[[4]], scale=0.7, fontsize="tiny"))

@
  \caption{\label{finalstate}Final graph from the test procedure after rejection of $H_{21}$, $H_{31}$ and $H_{32}$.}
\end{figure}

The command \texttt{createGsrmtpReport} generates a full report of the testing procedure:

\scriptsize
<<echo=TRUE>>=

createGsrmtpReport(result, "Report.tex")

@
\normalsize
<<echo=FALSE,results=hide>>=

pval <- c(0.02,0.055,0.012)

df <- 9
# Sample Standard Deviations:
s <- c(1.2, 0.8, 1.7)
# Statistics:
st <- qt(pval/2,df=df, lower.tail=FALSE)
# Estimates:
est <- st*s/sqrt(10)

@


\subsubsection{Adjusted p-values and simultaneous confidence intervals}

Also adjusted p-values and simultaneous confidence intervals can be computed.

Let's assume the tests for hypotheses $H1:\;\theta_1=0$, $H2:\;\theta_2=0$ and $H3:\;\theta_3=0$ are three t-tests with degree of freedom 9.
The estimates are $\hat\theta_1=\Sexpr{format(est[1])}$, $\hat\theta_2=\Sexpr{format(est[2])}$ and $\hat\theta_3=\Sexpr{format(est[3])}$, 
the sample standard deviations $s_1=1.2$, $s_2=0.8$ and $s_3=1.7$ the t-statistics $\Sexpr{format(st[1])}$, $\Sexpr{format(st[2])}$ and $\Sexpr{format(st[3])}$ and the corresponding p-values $p_1=0.02$, $p_2=0.055$ and $p_3=0.012$.
We want to adjust for multiple testing by using the Bonferroni-Holm-Procedure.

\scriptsize
<<echo=TRUE, keep.source=TRUE>>=
adjPValues(createBonferroniHolmGraph(3), c(0.02,0.055,0.012))@adjPValues

# Estimates:
est <- c("H1"=0.9101444, "H2"=0.4485153, "H3"=1.4568271)
# Sample standard deviations:
ssd <- c("H1"=1.2, "H2"=0.8, "H3"=1.7)

simConfint(createBonferroniHolmGraph(3),
		pvalues  = c(0.02,0.055,0.012), 
		confintF = function(node, alpha) {
			est[node]+c(-1,1)*qt(1-alpha/2,df=9)*ssd[node]/sqrt(10)
		})

@
\normalsize

\subsection{Using the GUI}

For version 0.1 this is not yet implemented, but it's a goal for gsrmtp 0.2.
You can see some of the features planed for the package \texttt{gsrmtp} in figure \ref{fullGUI}
that exist as prototypes but are not yet publicly available.

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.8\textwidth]{pictures/FullFeaturedGUI.png}      
  \caption{\label{fullGUI} A preview of the full-featured graphical user interface.}
\end{figure}


\section{Important TikZ commands for optimizing the reports}
A clear automatic placement of edges and weight labels without overlapping is a very difficult task 
and for complicated graphs the \texttt{gsrmtp} package will often fail to accomplish this.
There is the possibilty to adjust the edges and labels in the GUI, but since the {\LaTeX} graph layout is not (yet) exactly the same,
there is perhaps the need for adjusting the graphs in the TikZ code.
The TikZ program is very useful and we recommend it for many purposes,
but perhaps you don't have the time to read the 560 pages manual \cite{TikZ},
so here is a short overview of the most important commands for this kind of graphs.

Let's start with this graph in figure \ref{uglygraph}:

\scriptsize
\lstset{language=[LaTeX]TeX}
\begin{lstlisting}
\begin{tikzpicture}[scale=1]
\node (H11) at (200bp,200bp) [draw,circle split,fill=green!80] {$H11$ \nodepart{lower} $0.0333$};
...
\draw [->,line width=1pt] (H11) to[bend left=15] node[near start,above,fill=blue!20] {0.667} (H12);
...
\end{tikzpicture}
\end{lstlisting}
\normalsize

\begin{figure}[ht]
  \centering   
<<echo=FALSE,results=tex>>=

cat(graph2latex(result@graphs[[3]], pvalues=pvalues, scale=0.7, fontsize="tiny"))

@
  \caption{\label{uglygraph}Graph from \texttt{graph2latex} that does not look optimal.}
\end{figure}

You can scale the TikZ graphic by changing the \texttt{[scale=1]}
option.  By default \texttt{graph2latex} doesn't scale TikZ graphics,
but has an optional parameter \texttt{scale}.

For an explanation what \texttt{green!80} means and how you can
specify other colors, please take a look at the xcolor manual
\cite{xcolor}.

You can choose between the following label positions \texttt{above,
  below, right, left, above right, above left, below right}, and
\texttt{below left}.  In addition these positions can take an optional
dimension argument, so that for example \texttt{below=1pt} can be used
to place a label below and additionally shift it 1pt downwards.

You can change the position where the edge weight label is placed to
\texttt{at start, very near start, near start, midway, near end, very
  near end} and \texttt{at end} or simply use something like
\texttt{pos=0.5}.  If you add an argument \texttt{sloped}, the text
label will be rotated so that a parallel line to the base line becomes
a tangent to the edge.

Often it is useful to reduce the bending angle in \texttt{[bend
    left=15]} below 15. You could also specify and change
\texttt{out=15} and \texttt{in=165} separately.

A powerful feature is the use of styles, since this will effect all
objects of a given class. But for this please take a look directly at
the TikZ manual \cite{TikZ}.

\newpage

\bibliography{literatur}

\end{document}
